import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'InvoiceDetailScreen.dart';

class InvoiceListScreen extends StatefulWidget {
  const InvoiceListScreen({super.key});

  @override
  State<InvoiceListScreen> createState() => _InvoiceListScreenState();
}

class _InvoiceListScreenState extends State<InvoiceListScreen> {
  List<dynamic> invoices = [];
  bool isLoading = true;
  String? role;
  String? userId;
  bool isSearching = false;
  TextEditingController searchController = TextEditingController();
  String? searchQuery;
  Timer? debounce;

  @override
  void initState() {
    super.initState();
    fetchInvoices();
  }

  @override
  void dispose() {
    debounce?.cancel();
    searchController.dispose();
    super.dispose();
  }

  String formatCurrency(dynamic amount) {
    final parsed = double.tryParse(amount.toString()) ?? 0.0;
    return parsed.toStringAsFixed(0).replaceAllMapped(
      RegExp(r'\B(?=(\d{3})+(?!\d))'), (match) => '.',
    );
  }

  String getDisplayStatus(String? status) {
    switch (status?.toLowerCase()) {
      case 'pending':
      case 'ch∆∞a duy·ªát':
      case 'Ch∆∞a thanh to√°n':
        return 'Ch·ªù duy·ªát';
      case 'approved':
      case 'ƒë√£ duy·ªát':
        return 'ƒê√£ duy·ªát';
      case 'rejected':
      case 'b·ªã t·ª´ ch·ªëi':
        return 'T·ª´ ch·ªëi';
      case 'paid':
      case 'ƒë√£ thanh to√°n':
        return 'ƒê√£ thanh to√°n';
      default:
        return status ?? 'Kh√¥ng r√µ';
    }
  }

  Future<void> fetchInvoices() async {
    setState(() => isLoading = true);

    final prefs = await SharedPreferences.getInstance();
    role = prefs.getString('role');
    userId = prefs.getString('user_id');

    if (role == null) {
      print('‚ùå Role ch∆∞a x√°c ƒë·ªãnh');
      setState(() => isLoading = false);
      return;
    }

    String baseUrl;
    if (role == 'staff') {
      baseUrl = 'http://192.168.0.108:8000/api/invoices?role=staff';
    } else {
      if (userId == null) {
        print('‚ùå UserID ch∆∞a x√°c ƒë·ªãnh');
        setState(() => isLoading = false);
        return;
      }
      baseUrl = 'http://192.168.0.108:8000/api/invoices?user_id=$userId&role=user';
    }

    if (searchQuery != null && searchQuery!.isNotEmpty) {
      baseUrl += '&search=${Uri.encodeComponent(searchQuery!)}';
    }

    try {
      final uri = Uri.parse(baseUrl);
      final response = await http.get(uri, headers: {'Accept': 'application/json'});

      if (response.statusCode == 200) {
        final jsonBody = jsonDecode(response.body);
        final dataList = jsonBody is Map && jsonBody.containsKey('data')
            ? jsonBody['data']
            : jsonBody;

        setState(() {
          invoices = List<dynamic>.from(dataList);
          isLoading = false;
        });
      } else {
        print('‚ùå L·ªói l·∫•y h√≥a ƒë∆°n: ${response.statusCode}');
        setState(() => isLoading = false);
      }
    } catch (e) {
      print('‚ùå Exception khi l·∫•y h√≥a ƒë∆°n: $e');
      setState(() => isLoading = false);
    }
  }

  void onSearchChanged(String value) {
    if (debounce?.isActive ?? false) debounce!.cancel();
    debounce = Timer(const Duration(milliseconds: 500), () {
      setState(() {
        searchQuery = value.trim();
      });
      fetchInvoices();
    });
  }

  Color _getStatusColor(String? status) {
    final normalized = status?.trim().toLowerCase(); // ‚úÖ Lo·∫°i b·ªè kho·∫£ng tr·∫Øng

    switch (normalized) {
      case 'pending':
      case 'ch·ªù duy·ªát':
      case 'Ch∆∞a thanh to√°n':
        return Colors.yellow.shade100;
      case 'approved':
      case 'ƒë√£ duy·ªát':
        return Colors.green.shade100;
      case 'rejected':
      case 'b·ªã t·ª´ ch·ªëi':
        return Colors.red.shade100;
      default:
        print("‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c status: $status"); // debug
        return Colors.grey.shade200;
    }
  }

  Widget buildInvoiceItem(Map<String, dynamic> invoice) {
    final createdAt = invoice['CreatedAt'] ?? invoice['created_at'] ?? '';
    final formattedDate = createdAt.toString().split('T').first;
    final status = invoice['Status'] ?? invoice['status'] ?? 'unknown';
    final promotionNote = invoice['Note'] ?? invoice['note'];

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: _getStatusColor(status),
        borderRadius: BorderRadius.circular(16),
        boxShadow: const [
          BoxShadow(color: Colors.black12, blurRadius: 6, offset: Offset(0, 4)),
        ],
      ),
      child: ListTile(
        contentPadding: EdgeInsets.zero,
        title: Text(
          'üê∂ T√™n th√∫ c∆∞ng: ${invoice['name'] ?? 'Kh√¥ng r√µ'}',
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        subtitle: Padding(
          padding: const EdgeInsets.only(top: 8.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('üßæ M√£ l·ªãch h·∫πn: ${invoice['AppointmentID'] ?? 'N/A'}'),
              Text('üí∏ D·ªãch v·ª•: ${formatCurrency(invoice['ServicePrice'])} ƒë'),
              Text('üíä Thu·ªëc: ${formatCurrency(invoice['MedicineTotal'])} ƒë'),
              if (promotionNote != null && promotionNote.toString().isNotEmpty) ...[
                Text('üí∞ T·ªïng c·ªông (sau gi·∫£m): ${formatCurrency(invoice['TotalAmount'])} ƒë'),
                Text('üéÅ Khuy·∫øn m√£i: $promotionNote', style: const TextStyle(color: Colors.green)),
              ] else ...[
                Text('üí∞ T·ªïng c·ªông: ${formatCurrency(invoice['TotalAmount'])} ƒë'),
              ],
              Text('üóì Ng√†y t·∫°o: $formattedDate'),
              Text('üìå Tr·∫°ng th√°i: ${getDisplayStatus(status)}'),
            ],
          ),
        ),
        trailing: const Icon(Icons.receipt_long, color: Colors.teal),
        onTap: () {
          final invoiceId = invoice['InvoiceID']?.toString() ?? '';
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => InvoiceDetailScreen(invoiceId: invoiceId),
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade100,
      body: Column(
        children: [
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFFE0BBF9), Color(0xFFA7F0F9)],
                begin: Alignment.centerLeft,
                end: Alignment.centerRight,
              ),
              borderRadius: BorderRadius.only(
                bottomLeft: Radius.circular(24),
                bottomRight: Radius.circular(24),
              ),
            ),
            padding: const EdgeInsets.only(top: 40, left: 16, right: 16, bottom: 12),
            child: Row(
              children: [
                IconButton(
                  icon: const Icon(Icons.arrow_back, color: Colors.black87),
                  onPressed: () => Navigator.pop(context),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: isSearching
                      ? TextField(
                    controller: searchController,
                    autofocus: true,
                    style: const TextStyle(color: Colors.black),
                    decoration: const InputDecoration(
                      hintText: 'T√¨m h√≥a ƒë∆°n...',
                      hintStyle: TextStyle(color: Colors.black54),
                      border: InputBorder.none,
                    ),
                    onChanged: onSearchChanged,
                  )
                      : const Center(
                    child: Text(
                      "H√≥a ƒë∆°n",
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.black,
                      ),
                    ),
                  ),
                ),
                IconButton(
                  icon: Icon(isSearching ? Icons.close : Icons.search, color: Colors.black87),
                  onPressed: () {
                    setState(() {
                      if (isSearching) {
                        searchController.clear();
                        searchQuery = null;
                        fetchInvoices();
                      }
                      isSearching = !isSearching;
                    });
                  },
                ),
              ],
            ),
          ),
          Expanded(
            child: isLoading
                ? const Center(child: CircularProgressIndicator())
                : invoices.isEmpty
                ? const Center(child: Text('Kh√¥ng c√≥ h√≥a ƒë∆°n n√†o'))
                : ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: invoices.length,
              itemBuilder: (context, index) => buildInvoiceItem(invoices[index]),
            ),
          ),
        ],
      ),
    );
  }
}
